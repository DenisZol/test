#!/usr/bin/env python3
"""
mega_script.py
==============
End-to-end –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∫–µ–π—Å–∞ Help Global.

–ê–ª–≥–æ—Ä–∏—Ç–º
1.  –ü—Ä–∏–Ω–∏–º–∞–µ—Ç invoice_number (—Ü–µ–ª–æ–µ).
2.  –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É-–ø–∞–ø–∫—É ¬´000XXXXX¬ª.
3.  –ù–∞ Google Drive (CO ICF HELP GLOBAL) –∏—â–µ—Ç –ø–æ–¥–ø–∞–ø–∫—É-–∫–µ–π—Å.
4.  –°–∫–∞—á–∏–≤–∞–µ—Ç –∏–∑ –Ω–µ—ë:
      ‚Ä¢ Grant Agreement*.pdf
      ‚Ä¢ Invoice*.pdf ‚Üí —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ –∫–∞–∫ ¬´Invoice <num>.pdf¬ª.
5.  –°–æ–∑–¥–∞—ë—Ç/–Ω–∞—Ö–æ–¥–∏—Ç –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É –≤–∏–¥–∞
         ¬´–ù–æ–≤–∞ YY-MM XXX <—Ü–µ–ª–∞—è —Å—É–º–º–∞> ‚Ññ<num> –•–µ–ª–ø¬ª
    (–≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è create_case_dir), –∏
    –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç –≤ –Ω–µ—ë –æ–±–∞ PDF.
6.  –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç Invoice —á–µ—Ä–µ–∑ parser_Invoicev2.py, –ø–æ–ª—É—á–∞–µ—Ç
      {date, amount, case_descr}.
7.  –î–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ Google-—Ç–∞–±–ª–∏—Ü—É
      ¬´–£—á—ë—Ç –≥—Ä–∞–Ω—Ç–æ–≤ 4UA¬ª / –ª–∏—Å—Ç ¬´Help Global¬ª.

–¢—Ä–µ–±—É–µ—Ç—Å—è
    client_secret.json  ‚Äì —Ä—è–¥–æ–º —Å–æ —Å–∫—Ä–∏–ø—Ç–æ–º
    token.json          ‚Äì —Å–æ–∑–¥–∞—ë—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    parser_Invoicev2.py ‚Äì F:\–°–ª—É–∂–µ–±–Ω–∞—è\–í–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–æ 4UA\ChatGPT\–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è\Functions
"""

from __future__ import annotations
import argparse
import io
import os
import re
import shutil
import sys
from datetime import datetime
from pathlib import Path
from typing import Dict, Optional
from importlib import util as _import_util

from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from googleapiclient.http import MediaIoBaseDownload
from googleapiclient.errors import HttpError

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ GOOGLE CONSTANTS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
ROOT_FOLDER_ID = "1KNvnzuBL_froKQs-JVd8TVoGDMtL4-wx"
SCOPES = [
    "https://www.googleapis.com/auth/drive.readonly",
    "https://www.googleapis.com/auth/spreadsheets",
]
SHEET_ID = "1Pr0rb89ZIsy2qiBkZAySPuEf9B_zdn58CDurhtnQm0U"
SHEET_RANGE = "Help Global!A:L"
PAGE_SIZE = 1000

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ü–£–¢–ò –ö –í–ù–£–¢–†–ï–ù–ù–ò–ú –°–ö–†–ò–ü–¢–ê–ú ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
FUNCTIONS_DIR = Path(
    r"F:\–°–ª—É–∂–µ–±–Ω–∞—è\–í–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–æ 4UA\ChatGPT\–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è\Functions"
)
PARSER_FILE = FUNCTIONS_DIR / "parser_Invoicev2.py"

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ô –ò–ú–ü–û–†–¢ parser_Invoicev2 ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if not PARSER_FILE.exists():
    sys.exit(f"‚ùå parser_Invoicev2.py –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ {PARSER_FILE}")
spec = _import_util.spec_from_file_location("parser_Invoicev2", PARSER_FILE)
parser_Invoice = _import_util.module_from_spec(spec)  # type: ignore
spec.loader.exec_module(parser_Invoice)               # type: ignore

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ SIMPLE FOLDER-CREATOR (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
CONSTANT_TEXT = "XXX"
FORBIDDEN = r'<>:"/\\|?*'


def sanitize(name: str) -> str:
    """–£–¥–∞–ª—è–µ—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ –∏–º–µ–Ω–∏ –ø–∞–ø–∫–∏."""
    name = re.sub(f"[{re.escape(FORBIDDEN)}]", "", name)
    return name.strip(" .")


def create_case_dir(date_iso: str, amount: float, invoice_number: int) -> Path:
    """–°–æ–∑–¥–∞—ë—Ç –ø–∞–ø–∫—É ¬´–ù–æ–≤–∞ YY-MM XXX <amount_int> ‚Ññ<num> –•–µ–ª–ø¬ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å."""
    dt = datetime.fromisoformat(date_iso).date()
    yy_mm = dt.strftime("%y-%m")
    amount_int = int(round(amount))
    dir_name = f"–ù–æ–≤–∞ {yy_mm} {CONSTANT_TEXT} {amount_int} ‚Ññ{invoice_number} –•–µ–ª–ø"
    dir_path = Path.cwd() / sanitize(dir_name)
    dir_path.mkdir(exist_ok=True)
    return dir_path


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ OAUTH ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def get_credentials() -> Credentials:
    token_path = Path("token.json")
    creds: Optional[Credentials] = None

    if token_path.exists():
        creds = Credentials.from_authorized_user_file(token_path, SCOPES)
        if creds and creds.expired and creds.refresh_token:
            try:
                creds.refresh(Request())
            except Exception:
                creds = None

    if not creds or not creds.valid:
        if not Path("client_secret.json").exists():
            sys.exit("‚ùå client_secret.json –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        flow = InstalledAppFlow.from_client_secrets_file("client_secret.json", SCOPES)
        creds = flow.run_local_server(port=0)
        token_path.write_text(creds.to_json(), encoding="utf-8")

    return creds


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ DRIVE HELPERS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def find_case_folder(service, case_folder_name: str) -> Optional[str]:
    query = (
        f"'{ROOT_FOLDER_ID}' in parents and "
        "mimeType='application/vnd.google-apps.folder' and "
        f"name='{case_folder_name}' and trashed=false"
    )
    resp = (
        service.files()
        .list(
            q=query,
            fields="files(id)",
            supportsAllDrives=True,
            includeItemsFromAllDrives=True,
            corpora="allDrives",
            pageSize=1,
        )
        .execute()
    )
    files = resp.get("files", [])
    return files[0]["id"] if files else None


def find_first_pdf(service, parent_id: str, prefix: str) -> Optional[Dict]:
    query = (
        f"'{parent_id}' in parents and "
        "mimeType='application/pdf' and trashed=false"
    )
    resp = (
        service.files()
        .list(
            q=query,
            fields="files(id, name)",
            supportsAllDrives=True,
            includeItemsFromAllDrives=True,
            corpora="allDrives",
            pageSize=PAGE_SIZE,
        )
        .execute()
    )
    for f in resp.get("files", []):
        if f["name"].lower().startswith(prefix.lower()):
            return f
    return None


FORBIDDEN = r'<>:"/\\|?*'

def _clean_filename(name: str) -> str:
    """–£–±–∏—Ä–∞–µ—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Windows –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã/—Ç–æ—á–∫–∏."""
    import re
    name = re.sub(f"[{re.escape(FORBIDDEN)}]", "_", name)
    return name.strip(" .")

def download_pdf(service, file_meta: Dict, local_name: str) -> Path:
    # 1. –¥–æ–ø–∏—Å—ã–≤–∞–µ–º .pdf, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if not local_name.lower().endswith(".pdf"):
        local_name += ".pdf"
    # 2. —á–∏—Å—Ç–∏–º –∏–º—è
    local_name = _clean_filename(local_name)

    request = service.files().get_media(fileId=file_meta["id"])
    with io.FileIO(local_name, "wb") as fh:
        downloader = MediaIoBaseDownload(fh, request)
        done = False
        while not done:
            downloader.next_chunk()
            done = downloader._done  # type: ignore
    return Path(local_name).resolve()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ SHEETS APPEND ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def append_row(sheets_service, row):
    sheets_service.spreadsheets().values().append(
        spreadsheetId=SHEET_ID,
        range=SHEET_RANGE,
        valueInputOption="USER_ENTERED",
        insertDataOption="INSERT_ROWS",
        body={"values": [row]},
    ).execute()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ MAIN ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def main():
    parser = argparse.ArgumentParser(description="–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª—ã, —Å–æ–∑–¥–∞—ë—Ç –ø–∞–ø–∫—É –∏ –¥–æ–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É.")
    parser.add_argument("invoice_number", type=int)
    args = parser.parse_args()

    invoice_num = args.invoice_number
    invoice_str_padded = f"{invoice_num:08d}"

    creds = get_credentials()
    drive = build("drive", "v3", credentials=creds)
    sheets = build("sheets", "v4", credentials=creds)

    # 1. –ü–∞–ø–∫–∞-–∫–µ–π—Å –Ω–∞ Drive
    folder_id = find_case_folder(drive, invoice_str_padded)
    if not folder_id:
        sys.exit("‚ùå –ü–∞–ø–∫–∞-–∫–µ–π—Å –Ω–∞ Drive –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    # 2. –°–∫–∞—á–∏–≤–∞–µ–º Invoice + Grant Agreement
    inv_meta = find_first_pdf(drive, folder_id, "Invoice")
    if not inv_meta:
        sys.exit("‚ùå Invoice*.pdf –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    inv_local = download_pdf(drive, inv_meta, f"Invoice {invoice_num}.pdf")
    print(f"‚¨áÔ∏è  Invoice ‚Üí {inv_local.name}")

    ga_meta = find_first_pdf(drive, folder_id, "Grant Agreement")
    ga_local = None
    if ga_meta:
        ga_local = download_pdf(drive, ga_meta, ga_meta["name"])
        print(f"‚¨áÔ∏è  Grant Agreement ‚Üí {ga_local.name}")
    else:
        print("‚ö†Ô∏è  Grant Agreement –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–µ–≥–æ.")

    # 3. –ü–∞—Ä—Å–∏–º Invoice
    try:
        info: Dict = parser_Invoice.parse_invoice(str(inv_local))
        date_iso = info["date"]          # YYYY-MM-DD
        amount = info["amount"]          # float / decimal
        case_descr = info.get("case_descr", "")
    except Exception as e:
        sys.exit(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Invoice: {e}")

    # 4. –°–æ–∑–¥–∞—ë–º / –Ω–∞—Ö–æ–¥–∏–º –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É
    target_dir = None
    for p in Path.cwd().iterdir():
        if p.is_dir() and str(invoice_num) in p.name:
            target_dir = p
            break
    if not target_dir:
        target_dir = create_case_dir(date_iso, amount, invoice_num)
        print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –ø–∞–ø–∫–∞: {target_dir.name}")
    else:
        print(f"üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–∞–ø–∫—É: {target_dir.name}")

    # 5. –ü–µ—Ä–µ–º–µ—â–∞–µ–º PDF
    shutil.move(str(inv_local), target_dir / inv_local.name)
    if ga_local:
        shutil.move(str(ga_local), target_dir / ga_local.name)

    # 6. Append to Google Sheet
    row = [
        date_iso,               # A
        "",                     # B
        "",                     # C
        invoice_num,            # D
        case_descr,             # E
        amount,                 # F
        "", "", "", "", "",     # G-K
        "—Ö–µ—Ä",                  # L
    ]
    append_row(sheets, row)
    print("‚úÖ –°—Ç—Ä–æ–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ ¬´Help Global¬ª.")


if __name__ == "__main__":
    try:
        main()
    except HttpError as e:
        sys.exit(f"Google API error: {e}")
    except KeyboardInterrupt:
        sys.exit("\n‚èπÔ∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
